# -*- coding: utf-8 -*-
"""05_visualization.Krasnoschekova_Xenus.ПИ22-4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OjQpq7KCnxUmz_egLXICrwMChJublNSU
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns

!pip install pandas_datareader
import pandas_datareader as pdr

"""## Лабораторная работа 5.1

### Визуализация данных при помощи пакета `matplotlib`

1\. В файле `average_ratings.npy` содержится информация о среднем рейтинге 3 рецептов за период с 01.01.2019 по 30.12.2021. При помощи пакета `matplotlib` в _одной системе координат_ (на одной картинке) изобразите три временных ряда, соответствующих средним рейтингам этих рецептов. 

По горизонтальной оси располагается номер дня (0, 1, 2, ...), по вертикальной - средний рейтинг рецептов в этот день. 

Названия рецептов и их индексы в файле `average_ratings.npy`:
```
0: waffle iron french toast
1: zwetschgenkuchen bavarian plum cake
2: lime tea
```

Результатом работы является визуализация, на которой:
* добавлена подпись горизонтальной оси с текстом "Номер дня"
* добавлена подпись вертикальной оси с текстом "Средний рейтинг"
* добавлена подпись рисунка с текстом "Изменение среднего рейтинга трех рецептов"
* каждый из временных рядов имеет уникальный цвет
* добавлена легенда, на которой отображается название каждого из рецептов

_Примечание_ : для считывания файла воспользуйтесь функцией `np.load`.
"""

rp = np.load('average_ratings.npy')
rp = np.transpose(rp)
rp = pd.DataFrame(rp)
rcp =['waffle iron french toast', 'zwetschgenkuchen bavarian plum cake', 'lime tea']

for i in range(3):
  plt.plot(rp.index, rp.iloc[:,i], label=rcp[i])

plt.title("Изменение среднего рейтинга 3 рецептов")
plt.xlabel("Номер дня")
plt.ylabel("Средний рейтинг")

plt.legend()

rp

"""2\. Измените визуализацию, полученную в задании 1, таким образом, чтобы по горизонтальной оси отображались года, а между двумя соседними годами располагались засечки, соответствующие месяцам. Для этого создайте диапазон дат от 01.01.2019 по 30.12.2021 с шагом в один день (например, [вот так](https://pandas.pydata.org/docs/reference/api/pandas.date_range.html)) и используйте этот диапазон при вызове метода `plot`. Далее настройте `major_locator` и `minor_locator` горизонтальной оси (подробнее см. [здесь](https://matplotlib.org/stable/gallery/text_labels_and_annotations/date.html))

Примените к получившемуся рисунку цвета графиков, подписи, легенду из задания 1. Измените подпись горизонтальной оси, написав там слово "Дата".

"""

d_rr = pd.date_range('01.01.2019', '30.12.2021')
figure = plt.figure(figsize = (8, 6))
rcp =['waffle iron french toast', 'zwetschgenkuchen bavarian plum cake', 'lime tea']

axs = figure.add_subplot(111)
axs.plot(d_rr, rp, label=rcp)
axs.xaxis.set_major_locator(mdates.YearLocator())
axs.xaxis.set_minor_locator(mdates.MonthLocator())
axs.legend()

plt.title("Изменение среднего рейтинга 3 рецептов")
plt.xlabel("Дата")
plt.ylabel("Средний рейтинг")

plt.legend()

"""3\. Измените визуализацию, полученную в задании 2, разбив одну картинку на три, расположенных друг под другом. Три изображения должны иметь одну общую горизонтальную ось (каждое изображение засечки в нижней части, но значения этих засечек находятся только под самым нижним изображением). Примените к получившемуся рисунку цвета графиков, подписи, легенду из задания 2. """

fig, ax = plt.subplots(nrows=3, ncols=1, figsize=(15,10), sharex=True)
d_rrr = pd.date_range('01.01.2019', '30.12.2021')

ax[0].plot(np.array(d_rrr), rp[1], color='orange', label='zwetschgenkuchen bavarian plum cake')
ax[1].plot(np.array(d_rrr), rp[0], color='blue', label='waffle iron french toast')
ax[2].plot(np.array(d_rrr), rp[2], color='green', label='lime tea')

ax[2].set_xlabel('Дата', fontsize=15)

ax[0].set_ylabel('Средний рейтинг')
ax[1].set_ylabel('Средний рейтинг')
ax[2].set_ylabel('Средний рейтинг')

plt.suptitle('Изменение среднего рейтинга 3 рецептов', fontsize=15)

ax[2].xaxis.set_major_locator(mdates.YearLocator())
ax[2].xaxis.set_minor_locator(mdates.MonthLocator())

fig.legend()

"""4\. В файле `visitors.npy` представлена информация о количестве посетителей сайта в течении первых 100 дней после объявления сайтом акции. Постройте график изменения количества пользователей в зависимости от дня в двух вариантах, расположенных рядом по горизонтали. В обоих случаях изобразите график в виде ломаной, но в первом случае оставьте линейный масштаб осей, а во втором случае сделайте вертикальную ось в логарифмическом масштабе. Добавьте на обе картинки подпись над этим графиком к текстом $y(x)=\lambda e^{-\lambda x}$

Добавьте на оба изображения красную горизонтальную линию на уровне $y=100$. Добавьте на обе картинки подпись над этой линией с текстом $y(x)=100$

Добавьте на оба изображения подписи осей; горизонтальную ось подпишите текстом "Количество дней с момента акции", вертикальную - "Число посетителей".

Добавьте общий заголовок для фигуры с текстом "Изменение количества пользователей в линейном и логарифмическом масштабе".

"""

vis=np.load('visitors.npy')
fig, axs = plt.subplots(ncols=2, figsize=[10, 6]) 

axs[0].plot(vis)
a = axs[0].axhline(y=100, color='r')
axs[0].text(x=0, y=150, s='y(x)=100')
axs[0].text(x=40, y=2200, s='$y(x)=\lambda e^{\lambda*x}$')
axs[0].set_xlabel("Количество дней с момента начала акции")
axs[0].set_ylabel("Число посетителей")

plt.suptitle('\nИзменение количества пользователей в линейном и логарифмическом масштабе', fontsize=12)
axs[1].semilogy(vis)
b = axs[1].axhline(y=100, color='r')
axs[1].text(x=0, y=115, s='y(x)=100')
axs[1].text(x=40, y=1600, s='$y(x)=\lambda e^{\lambda*x}$')
axs[1].set_xlabel("Количество дней с момента начала акции")
axs[1].set_ylabel("Число посетителей")

plt.legend()

"""## Лабораторная работа 5.2

### Визуализация данных на основе структур `pandas`.

Для продолжения работы загрузите таблицы recipes и reviews (__ЛР2__)
"""

reviews = ...
recipes = ...

"""5\. Назовем рецепты короткими, если они занимают строго меньше 5 минут; средними, если они занимают от 5 до 50 минут (не включая 50), и длинными, если они занимают от 50 минут и больше. Сгруппируйте все рецепты по данному признаку и для каждой группы посчитайте 2 величины: среднее количество шагов рецептов в группе и размер группы. При помощи методов структур `pandas` постройте столбчатую диаграмму, где каждый столбец означает группу (короткие, средние или длинные рецепты), а высота столбца обозначает среднее количество шагов рецептов в группе. Рядом по горизонтали разместите круговую диаграмму, на которой отображены размеры каждой из групп.

Добавьте следующие подписи:
* по горизонтальной оси под столбчатой диаграммой напишите "Группа рецептов"
* по вертикальной оси слева от столбчатой диаграммы напишите "Средняя длительность"
* над круговой диаграммой напишите "Размеры групп рецептов"
"""

rw = pd.read_csv('reviews_sample.csv')
rp = pd.read_csv('recipes_sample.csv')

def _gr(x):
    xin = int(x)
    if xin < 5:
        return 'короткий'
    elif xin >= 5 and xin < 50:
        return 'средний'
    elif xin >= 50:
        return 'длинный'

rp['type'] = rp.minutes.apply(lambda x: _gr(x))
gr = rp.groupby('type')['n_steps'].agg([np.mean, len])
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(8,3))

#1
gr['mean'].plot(kind='bar', ax=ax[0], color='pink', rot=0, edgecolor='black')
ax[0].set_xlabel('Группа рецептов')
ax[0].set_ylabel('Средняя длительность')

#2
gr['len'].plot(kind='pie', ax=ax[1], explode=(0.1, 0.1, 0.1), autopct='%1.1f%%')
ax[1].set_title('Размеры групп рецептов')

"""6\. Из всего множества отзывов оставьте только те, которые были даны в 2008 и 2009 годах. Воспользовавшись возможностями метода `pd.DataFrame.plot.hist`, постройте 2 гистограммы столбца `rating`. Гистограммы должны быть расположены рядом по горизонтали. Левая гистограмма соотвествует 2008 году, правая - 2009 году. Добавьте общую подпись для рисунка с текстом "Гистограммы рейтинга отзывов в 2008 и 2009 годах". Добейтесь того, чтобы подпись вертикальной оси правого рисунка не "наезжала" на левый рисунок."""

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(8,3))
plt.tight_layout(pad=3)
rw[rw['date'].between('2008-01-01', '2009-01-01')]['rating'].plot.hist(ax=ax[0], color='pink', rot=0, edgecolor='black')
rw[rw['date'].between('2009-01-01', '2010-01-01')]['rating'].plot.hist(ax=ax[1], color='gray', rot=0, edgecolor='black')
plt.suptitle('\nГистограммы рейтинга отзывов в 2008 и 2009 годах', fontsize=12, fontweight = 'bold')

"""### Визуализация данных при помощи пакета `seaborn`

7\. При помощи пакета `seaborn` постройте диаграмму рассеяния двух столбцов из таблицы `recipes`: `n_steps` и `n_ingredients`. Укажите в качестве группирующей переменной (hue) категориальную длительность рецепта (короткий, средний или длинные; см. задание 5). 

Добавьте заголовок рисунка "Диаграмма рассеяния n_steps и n_ingredients"

Прокомментируйте, наблюдается ли визуально линейная зависимость между двумя этими переменными. Ответ оставьте в виде текстовой ячейки под изображением.
"""

fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(6,3))

sns.set_style('darkgrid')
sns.scatterplot(data=rp, x='n_steps', y='n_ingredients', hue='type')
ax.set_title('\nДиаграмма рассеяния n_steps и n_ingredients', fontsize=12, fontweight = 'bold')
fig.text(0.12, -0.12, 'зависимость наблюдается;\n(>ингридиентов=>длиннее\nрецепт)', color = 'g', fontsize=9, fontweight = 'bold')

"""8\. Объедините две таблицы `recipes` и `reviews` и постройте корреляционную матрицу на основе столбцов "minutes", "n_steps", "n_ingredients" и "rating". При помощи пакета `seaborn` визуализируйте полученную матрицу в виде тепловой карты (heatmap). 

Добавьте в ячейки тепловой карты подписи (значения к-та корреляции). Измените цветовую палитру на `YlOrRd`. 

Добавьте заголовок рисунка "Корреляционная матрица числовых столбцов таблиц recipes и reviews"
"""

dfrm1 = rp.merge(rw, left_on='id', right_on='recipe_id')[['minutes', 'n_steps', 'n_ingredients', 'rating']]
fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(6,3))
cor = dfrm1.corr()
sns.heatmap(data=cor[cor.columns.tolist()[::-1]], annot=True, linewidth=.5, cmap='YlOrRd')
ax.set_title('\nКорреляционная матрица числовых\nстолбцов таблиц recipes и reviews', fontsize=12, fontweight = 'bold')